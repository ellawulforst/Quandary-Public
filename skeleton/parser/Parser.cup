package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal PLUS, LPAREN, RPAREN;
terminal RETURN, MULT, MINUS, SEMI;
terminal IF, LE, GE, EQ, NE, LT, GT, NOT, AND, OR, ELSE, WHILE;
terminal Long    INTCONST;
terminal String  IDENT;
terminal OBRACKET, CBRACKET, ASSIGN, PRINT, INT, COMMA, REF, Q, NIL, DOT, MUTABLE;

non terminal Program             program;
non terminal Expr                expr;
non terminal BinaryExpr          binaryExpr;
non terminal VarDecl             varDecl;
non terminal Type                type;
non terminal StmtList            stmtList;
non terminal Stmt                stmt;
non terminal CondExpr            condExpr;
non terminal FuncDefList         funcDefList;
non terminal FuncDef             funcDef;
non terminal FormalDeclList      formalDeclList;
non terminal FormalDeclList      neFormalDeclList;
non terminal ExprList            exprList;
non terminal ExprList            neExprList;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left LE, GE, EQ, NE, LT, GT;

precedence left ELSE; //resolves dangling else
precedence left PLUS, MINUS;
precedence left MULT;
precedence left DOT;

start with program;

program ::= funcDefList:fcdl
            {: RESULT = new Program(fcdl, loc(fcdlleft, fcdlright)); :}
         ;

funcDefList ::= funcDef:fcd funcDefList:fcdl
            {: RESULT = new FuncDefList(fcd, fcdl, loc(fcdleft, fcdright)); :}
         | /* empty */
            {: RESULT = null; :}
         ;

funcDef ::= varDecl:funcName LPAREN formalDeclList:fdl RPAREN OBRACKET stmtList:sl CBRACKET
            {: RESULT = new FuncDef(funcName, fdl, sl, loc(funcNameleft, funcNameright)); :}
         ;

varDecl ::= type:t IDENT:ident
            {: RESULT = new VarDecl(false, t, ident, loc(identleft, identright)); :}
         |  MUTABLE INT IDENT:ident
            {: RESULT = new VarDecl(true, t, ident, loc(identleft, identright)); :}
         ;

type ::= INT:int
            {: RESULT = new Type(1, loc(intleft, intright)); :}
         | REF:ref
            {: RESULT = new Type(2, loc(refleft, refright)); :}
         | Q:q
            {: RESULT = new Type(3, loc(qleft, qright)); :}
         ;

formalDeclList ::= neFormalDeclList:nefdl
            {: RESULT = nefdl; :}
         | /* empty */
            {: RESULT = null; :}
         ;

neFormalDeclList ::= varDecl:vd COMMA neFormalDeclList:nefdl
            {: RESULT = new FormalDeclList(vd, nefdl, loc(vdleft, vdright)); :}
         | varDecl:vd
            {: RESULT = new FormalDeclList(vd, null, loc(vdleft, vdright)); :} // OR DO I JUST DO REULT = VD
         ;

stmtList ::= stmt:s stmtList:sl
            {: RESULT = new StmtList(s, sl, loc(sleft, sright)); :}
         | /*empty*/
            {: RESULT = null; :}
         ;

stmt ::= varDecl:vd ASSIGN expr:e SEMI
         {: RESULT = new VarAssign(vd, e, loc(vdleft, vdright)); :}
      | IDENT:ident ASSIGN expr:e
         {: RESULT = new Reassign(ident, e, loc(identleft, identright)); :}
      | IF LPAREN condExpr:c RPAREN stmt:s
         {: RESULT = new IfStmt(c, s, loc(cleft, cright)); :}
      | IF LPAREN condExpr:c RPAREN stmt:ifStmt ELSE stmt:elseStmt
         {: RESULT = new IfElseStmt(c, ifStmt, elseStmt, loc(cleft, cright)); :}
      | WHILE LPAREN condExpr:c RPAREN stmt:s
         {: RESULT = new While(c, stmt, loc(cleft, cright)); :}
      | IDENT:ident LPAREN exprList:el RPAREN SEMI
         {: RESULT = new CallStmt(ident, el, loc(identleft, identright)); :}
      | PRINT expr:e SEMI
         {: RESULT = new Print(e, loc(eleft, eright)); :}
      | RETURN expr:e SEMI
         {: RESULT = new Return(e, loc(eleft, eright)); :}
      | OBRACKET stmtList:sl CBRACKET
         {: RESULT = sl; :}
      ;

exprList ::= neExprList:neel
         {: RESULT = neel; :}
      | /* empty */
         {: RESULT = null; :}
      ;

neExprList ::= expr:e COMMA neExprList:neel
         {: RESULT = new ExprList(e, neel, loc(eleft, eright)); :}
      | expr:e
         {: RESULT = new ExprList(e, null, loc(eleft, eright)); :}
      ;

expr ::= NIL
         /* TODO: DO I NEED TO ACTUALLY MAKE A NIL SYMBOL? WHATS THE DIF HERE? */
         {: RESULT = null; :}
      | INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      | IDENT:ident LPAREN exprList:el RPAREN
         {: RESULT = new CallExpr(ident, el, loc(identleft, identright)); :}
      | IDENT:ident
         {: RESULT = new Ident(ident, loc(identleft, identright)); :}
      |  MINUS expr:e 
         {: RESULT = new UnaryExpr(e, loc(eleft, eright)); :}
      |  LPAREN type:t RPAREN expr:expr
         {: RESULT = new Cast(t, expr, loc(tleft, tright)); :}
      |  binaryExpr:e
         {: RESULT = e; :}
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      ;

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.BMINUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MULT expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MULT, e2, loc(e1left, e1right)); :}
            | expr:e1 DOT expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.DOT, e2, loc(e1left, e1right)); :}
            ;

condExpr ::= expr:e1 LE expr:e2
            {: RESULT = new CondExpr(e1, CondExpr.LE, e2, loc(e1left, e1right)); :}
      |  expr:e1 GE expr:e2
            {: RESULT = new CondExpr(e1, CondExpr.GE, e2, loc(e1left, e1right)); :}
      | expr:e1 EQ expr:e2
            {: RESULT = new CondExpr(e1, CondExpr.EQ, e2, loc(e1left, e1right)); :}
      | expr:e1 NE expr:e2
            {: RESULT = new CondExpr(e1, CondExpr.NE, e2, loc(e1left, e1right)); :}
      | expr:e1 LT expr:e2
            {: RESULT = new CondExpr(e1, CondExpr.LT, e2, loc(e1left, e1right)); :}
      | expr:e1 GT expr:e2
            {: RESULT = new CondExpr(e1, CondExpr.GT, e2, loc(e1left, e1right)); :}
      | condExpr:c1 AND condExpr:c2
            {: RESULT = new CondExpr(c1, CondExpr.AND, c2, loc(c1left, c1right)); :}
      | condExpr:c1 OR condExpr:c2
            {: RESULT = new CondExpr(c1, CondExpr.OR, c2, loc(c1left, c1right)); :}
      | NOT condExpr:c
            {: RESULT = new CondExpr(null, CondExpr.NOT, c, loc(cleft, cright)); :}
      | LPAREN condExpr:c RPAREN
            {: RESULT = c; :}
      ; 

