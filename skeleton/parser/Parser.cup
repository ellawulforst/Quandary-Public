package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal PLUS, LPAREN, RPAREN;
terminal RETURN, MULT, MINUS, SEMI;
terminal IF, LE, GE, EQ, NE, LT, GT, NOT, AND, OR, ELSE;
terminal Long    INTCONST;
terminal String  IDENT;
terminal OBRACKET, CBRACKET, ASSIGN, PRINT, INT;

non terminal Program         program;
non terminal Expr            expr;
non terminal BinaryExpr      binaryExpr;
non terminal FuncDef         funcDef;
non terminal VarDecl         varDecl;
non terminal StmtList        stmtList;
non terminal Stmt            stmt;

/* non terminal Cond            cond;
non terminal Type            type; */

/* precedence OR;
precedence AND;
precedence NOT;
precedence LE, GE, EQ, NE, LT, GT; */

precedence left PLUS, MINUS;
precedence left MULT;
precedence left ELSE; //resolves dangling else

start with program;

program ::= funcDef:fcd
            {: RESULT = new Program(fcd, loc(fcdleft, fcdright)); :}
         ;

funcDef ::= varDecl:funcName LPAREN varDecl:params RPAREN OBRACKET stmtList:sl CBRACKET
            {: RESULT = new FuncDef(funcName, params, sl, loc(funcNameleft, funcNameright)); :}
         ;

varDecl ::= INT IDENT:ident
            {: RESULT = new VarDecl(1, ident, loc(identleft, identright)); :}
         ;

stmtList ::= stmt:s stmtList:sl
            {: RESULT = new StmtList(s, sl, loc(sleft, sright)); :}
         | 
         ;

/*stmt ::= varDecl:vd ASSIGN expr:e SEMI
         {: RESULT = new VarAssign(vd, expr, loc(vdleft, vdright)); :}
      | IF LPAREN cond:c RPAREN stmt:s
         {: RESULT = new IfStmt(c, s, loc(cleft, cright)); :}
      | IF LPAREN cond:c RPAREN stmt:ifStmt ELSE stmt:elseStmt
         {: RESULT = new IfElseStmt(c, ifStmt, elseStmt, loc(cleft, cright)); :}
      | PRINT expr:e SEMI
         {: RESULT = new Print(e, loc(eleft, eright)); :} */

stmt ::= RETURN expr:e SEMI
         {: RESULT = new Return(e, loc(eleft, eright)); :}
      | OBRACKET stmtList:sl CBRACKET
         {: RESULT = sl; :}
      ;

expr ::= INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      | IDENT:ident
         {: RESULT = new Ident(ident, loc(identleft, identright)); :}
      |  MINUS expr:e 
         {: RESULT = new UnaryExpr(e, loc(eleft, eright)); :}
      |  binaryExpr:e
         {: RESULT = e; :}
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      ;

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.BMINUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MULT expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MULT, e2, loc(e1left, e1right)); :}
            ;
/* cond ::= expr:e1 LE expr:e2
            {: RESULT = new CondExpr(e1, Cond.LE, e2, loc(e1left, e1right)); :}
      |  expr:e1 GE expr:e2
            {: RESULT = new CondExpr(e1, Cond.GE, e2, loc(e1left, e1right)); :}
      | expr:e1 EQ expr:e2
            {: RESULT = new CondExpr(e1, Cond.EQ, e2, loc(e1left, e1right)); :}
      | expr:e1 NE expr:e2
            {: RESULT = new CondExpr(e1, Cond.NE, e2, loc(e1left, e1right)); :}
      | expr:e1 LT expr:e2
            {: RESULT = new CondExpr(e1, Cond.LT, e2, loc(e1left, e1right)); :}
      | expr:e1 GT expr:e2
            {: RESULT = new CondExpr(e1, Cond.GT, e2, loc(e1left, e1right)); :}
      | cond:c1 AND cond:c2
            {: RESULT = new Cond(c1, Cond.AND, c2, loc(c1left, c1right)); :}
      | cond:c1 OR cond:c2
            {: RESULT = new Cond(c1, Cond.OR, c2, loc(c1left, c1right)); :}
      | NOT cond:c
            {: RESULT = new Cond(nil, Cond.NOT, c, loc(cleft, cright)); :}
      | LPAREN cond:c RPAREN
            {: RESULT = c; :}
      ; */
/* andCond ::= cond:c1 AND cond:c2
            {: RESULT = new Cond(c1, Cond.AND, c2, loc(c1left, c1right)); :}
         ; */
/* orCond ::= cond:c1 OR cond:c2
            {: RESULT = new Cond(c1, Cond.OR, c2, loc(c1left, c1right)); :}
         ; */
/* notCond ::= NOT cond:c
            {: RESULT = new Cond(nil, Cond.NOT, c, loc(cleft, cright)); :}
         ; */

